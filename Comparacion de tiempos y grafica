import numpy as np
from time import time
from memory_profiler import memory_usage
import matplotlib.pyplot as plt

T = 2 * np.pi
t = np.linspace(0, T, 1000, endpoint=False)
f = np.sign(np.sin(t))  # Onda cuadrada

def trapecio_integral(y, t):
    return np.trapz(y, t)


def calcular_serie_fourier_iterativa(f, t, T, N):
    a0 = (2 / T) * trapecio_integral(f, t)
    an = []
    bn = []

    for n in range(1, N + 1):
        cos_term = np.cos(2 * np.pi * n * t / T)
        sin_term = np.sin(2 * np.pi * n * t / T)
        an_n = (2 / T) * trapecio_integral(f * cos_term, t)
        bn_n = (2 / T) * trapecio_integral(f * sin_term, t)
        an.append(an_n)
        bn.append(bn_n)

    return a0, an, bn


def calcular_serie_fourier_recursiva(f, t, T, N):
    def coeficiente_rec(n):
        if n == 0:
            a0 = (2 / T) * trapecio_integral(f, t)
            return [(a0, 0)]
        else:
            prev = coeficiente_rec(n - 1)
            cos_term = np.cos(2 * np.pi * n * t / T)
            sin_term = np.sin(2 * np.pi * n * t / T)
            an_n = (2 / T) * trapecio_integral(f * cos_term, t)
            bn_n = (2 / T) * trapecio_integral(f * sin_term, t)
            return prev + [(an_n, bn_n)]

    coef = coeficiente_rec(N)
    a0 = coef[0][0]
    an = [a for a, _ in coef[1:]]
    bn = [b for _, b in coef[1:]]
    return a0, an, bn


Ns = [5, 10, 20, 50]
tiempos_iter = []
tiempos_recur = []

print("Comparación de rendimiento (tiempo y memoria):")
for N in Ns:
 
    t1 = time()
    mem_iter = memory_usage((calcular_serie_fourier_iterativa, (f, t, T, N)), max_iterations=1)
    t_iter = time() - t1
    tiempos_iter.append(t_iter)

    t2 = time()
    mem_recur = memory_usage((calcular_serie_fourier_recursiva, (f, t, T, N)), max_iterations=1)
    t_recur = time() - t2
    tiempos_recur.append(t_recur)

    print(f"N={N:>2} | Iterativo: {t_iter:.6f} s, {max(mem_iter):.2f} MiB | Recursivo: {t_recur:.6f} s, {max(mem_recur):.2f} MiB")

plt.plot(Ns, tiempos_iter, marker='o', label="Iterativo")
plt.plot(Ns, tiempos_recur, marker='s', label="Recursivo")
plt.xlabel("Número de armónicos N")
plt.ylabel("Tiempo de ejecución (s)")
plt.title("Comparación de rendimiento: Serie de Fourier")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
